(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],2:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
    this["<|>"] = $less$bar$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$bar$greater = function (dict) {
    return dict["<|>"];
};
module.exports = {
    Alt: Alt, 
    "<|>": $less$bar$greater
};

},{"Prelude":17}],3:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
    this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
};
var some = function (__dict_Alternative_0) {
    return function (__dict_Lazy1_1) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_0["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_0["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_1)(function (_) {
                return many(__dict_Alternative_0)(__dict_Lazy1_1)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_2) {
    return function (__dict_Lazy1_3) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_2["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_2)(__dict_Lazy1_3)(v))(Prelude.pure(__dict_Alternative_2["__superclass_Prelude.Applicative_0"]())([  ]));
        };
    };
};
module.exports = {
    Alternative: Alternative, 
    many: many, 
    some: some
};

},{"Control.Alt":2,"Control.Lazy":6,"Prelude":17}],4:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
    this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
    this.extract = extract;
};
var extract = function (dict) {
    return dict.extract;
};
module.exports = {
    Comonad: Comonad, 
    extract: extract
};

},{"Prelude":17}],5:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
    this["<<="] = $less$less$eq;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
var $less$less$eq = function (dict) {
    return dict["<<="];
};
var $eq$less$eq = function (__dict_Extend_0) {
    return function (f) {
        return function (g) {
            return function (w) {
                return f($less$less$eq(__dict_Extend_0)(g)(w));
            };
        };
    };
};
var $eq$greater$eq = function (__dict_Extend_1) {
    return function (f) {
        return function (g) {
            return function (w) {
                return g($less$less$eq(__dict_Extend_1)(f)(w));
            };
        };
    };
};
var $eq$greater$greater = function (__dict_Extend_2) {
    return function (w) {
        return function (f) {
            return $less$less$eq(__dict_Extend_2)(f)(w);
        };
    };
};
var extendArr = function (__dict_Semigroup_3) {
    return new Extend(function (f) {
        return function (g) {
            return function (w) {
                return f(function (w$prime) {
                    return g(Prelude["<>"](__dict_Semigroup_3)(w)(w$prime));
                });
            };
        };
    }, function () {
        return Prelude.functorArr;
    });
};
var duplicate = function (__dict_Extend_4) {
    return function (w) {
        return $less$less$eq(__dict_Extend_4)(Prelude.id(Prelude.categoryArr))(w);
    };
};
module.exports = {
    Extend: Extend, 
    duplicate: duplicate, 
    "=<=": $eq$less$eq, 
    "=>=": $eq$greater$eq, 
    "=>>": $eq$greater$greater, 
    "<<=": $less$less$eq, 
    extendArr: extendArr
};

},{"Prelude":17}],6:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function Lazy(defer) {
    this.defer = defer;
};
function Lazy1(defer1) {
    this.defer1 = defer1;
};
function Lazy2(defer2) {
    this.defer2 = defer2;
};
var defer2 = function (dict) {
    return dict.defer2;
};
var fix2 = function (__dict_Lazy2_0) {
    return function (f) {
        return defer2(__dict_Lazy2_0)(function (_) {
            return f(fix2(__dict_Lazy2_0)(f));
        });
    };
};
var defer1 = function (dict) {
    return dict.defer1;
};
var fix1 = function (__dict_Lazy1_1) {
    return function (f) {
        return defer1(__dict_Lazy1_1)(function (_) {
            return f(fix1(__dict_Lazy1_1)(f));
        });
    };
};
var defer = function (dict) {
    return dict.defer;
};
var fix = function (__dict_Lazy_2) {
    return function (f) {
        return defer(__dict_Lazy_2)(function (_) {
            return f(fix(__dict_Lazy_2)(f));
        });
    };
};
module.exports = {
    Lazy2: Lazy2, 
    Lazy1: Lazy1, 
    Lazy: Lazy, 
    fix2: fix2, 
    fix1: fix1, 
    fix: fix, 
    defer2: defer2, 
    defer1: defer1, 
    defer: defer
};

},{"Prelude":17}],7:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function returnE(a) {  return function() {    return a;  };};
function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
function runPure(f) {  return f();};
function untilE(f) {  return function() {    while (!f());    return {};  };};
function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
var monadEff = new Prelude.Monad(function () {
    return applicativeEff;
}, function () {
    return bindEff;
});
var bindEff = new Prelude.Bind(bindE, function () {
    return applyEff;
});
var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
    return functorEff;
});
var applicativeEff = new Prelude.Applicative(function () {
    return applyEff;
}, returnE);
var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
module.exports = {
    foreachE: foreachE, 
    forE: forE, 
    whileE: whileE, 
    untilE: untilE, 
    runPure: runPure, 
    bindE: bindE, 
    returnE: returnE, 
    functorEff: functorEff, 
    applyEff: applyEff, 
    applicativeEff: applicativeEff, 
    bindEff: bindEff, 
    monadEff: monadEff
};

},{"Prelude":17}],8:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Control_Plus = require("Control.Plus");
function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
    this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
    this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
};
var guard = function (__dict_MonadPlus_0) {
    return function (_41) {
        if (_41) {
            return Prelude["return"](__dict_MonadPlus_0["__superclass_Prelude.Monad_0"]())(Prelude.unit);
        };
        if (!_41) {
            return Control_Plus.empty((__dict_MonadPlus_0["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
        };
        throw new Error("Failed pattern match");
    };
};
module.exports = {
    MonadPlus: MonadPlus, 
    guard: guard
};

},{"Control.Plus":9,"Prelude":17}],9:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
    this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
    this.empty = empty;
};
var empty = function (dict) {
    return dict.empty;
};
module.exports = {
    Plus: Plus, 
    empty: empty
};

},{"Prelude":17}],10:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Prelude_Unsafe = require("Prelude.Unsafe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
function length (xs) {  return xs.length;};
function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
function reverse (l) {  return l.slice().reverse();};
function drop (n) {  return function (l) {    return l.slice(n);  };};
function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
var $dot$dot = range;
var $bang$bang = function (xs) {
    return function (n) {
        var isInt = function (n_1) {
            return Prelude["/="](Prelude.eqNumber)(n_1)(Prelude.complement(Prelude.bitsNumber)(Prelude.complement(Prelude.bitsNumber)(n_1)));
        };
        return Prelude["||"](Prelude.boolLikeBoolean)(Prelude["<"](Prelude.ordNumber)(n)(0))(Prelude["||"](Prelude.boolLikeBoolean)(Prelude[">="](Prelude.ordNumber)(n)(length(xs)))(isInt(n))) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
    };
};
var take = function (n) {
    return slice(0)(n);
};
var tail = function (_64) {
    if (_64.length >= 1) {
        var _277 = _64.slice(1);
        return new Data_Maybe.Just(_277);
    };
    return Data_Maybe.Nothing.value;
};
var span = (function () {
    var go = function (__copy__80) {
        return function (__copy__81) {
            return function (__copy__82) {
                var _80 = __copy__80;
                var _81 = __copy__81;
                var _82 = __copy__82;
                tco: while (true) {
                    if (_82.length >= 1) {
                        var _282 = _82.slice(1);
                        if (_81(_82[0])) {
                            var __tco__80 = Prelude[":"](_82[0])(_80);
                            var __tco__81 = _81;
                            _80 = __tco__80;
                            _81 = __tco__81;
                            _82 = _282;
                            continue tco;
                        };
                    };
                    return {
                        init: reverse(_80), 
                        rest: _82
                    };
                };
            };
        };
    };
    return go([  ]);
})();
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var _283 = comp(x)(y);
                if (_283 instanceof Prelude.GT) {
                    return 1;
                };
                if (_283 instanceof Prelude.EQ) {
                    return 0;
                };
                if (_283 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match");
            };
        };
        return sortJS(comp$prime)(xs);
    };
};
var sort = function (__dict_Ord_0) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_0))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var semigroupArray = new Prelude.Semigroup(append);
var $$null = function (_66) {
    if (_66.length === 0) {
        return true;
    };
    return false;
};
var nubBy = function (_73) {
    return function (_74) {
        if (_74.length === 0) {
            return [  ];
        };
        if (_74.length >= 1) {
            var _288 = _74.slice(1);
            return Prelude[":"](_74[0])(nubBy(_73)(filter(function (y) {
                return Prelude.not(Prelude.boolLikeBoolean)(_73(_74[0])(y));
            })(_288)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_1) {
    return nubBy(Prelude["=="](__dict_Eq_1));
};
var mapMaybe = function (f) {
    return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
};
var last = function (__copy__63) {
    var _63 = __copy__63;
    tco: while (true) {
        if (_63.length >= 1) {
            var _291 = _63.slice(1);
            if (_291.length === 0) {
                return new Data_Maybe.Just(_63[0]);
            };
        };
        if (_63.length >= 1) {
            var _293 = _63.slice(1);
            _63 = _293;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var intersectBy = function (_70) {
    return function (_71) {
        return function (_72) {
            if (_71.length === 0) {
                return [  ];
            };
            if (_72.length === 0) {
                return [  ];
            };
            var el = function (x) {
                return Prelude[">="](Prelude.ordNumber)(findIndex(_70(x))(_72))(0);
            };
            return filter(el)(_71);
        };
    };
};
var intersect = function (__dict_Eq_2) {
    return intersectBy(Prelude["=="](__dict_Eq_2));
};
var init = function (_65) {
    if (_65.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(slice(0)(Prelude["-"](Prelude.numNumber)(length(_65))(1))(_65));
};
var head = function (_62) {
    if (_62.length >= 1) {
        var _300 = _62.slice(1);
        return new Data_Maybe.Just(_62[0]);
    };
    return Data_Maybe.Nothing.value;
};
var groupBy = (function () {
    var go = function (__copy__77) {
        return function (__copy__78) {
            return function (__copy__79) {
                var _77 = __copy__77;
                var _78 = __copy__78;
                var _79 = __copy__79;
                tco: while (true) {
                    if (_79.length === 0) {
                        return reverse(_77);
                    };
                    if (_79.length >= 1) {
                        var _305 = _79.slice(1);
                        var sp = span(_78(_79[0]))(_305);
                        var __tco__77 = Prelude[":"](Prelude[":"](_79[0])(sp.init))(_77);
                        var __tco__78 = _78;
                        _77 = __tco__77;
                        _78 = __tco__78;
                        _79 = sp.rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return go([  ]);
})();
var group = function (__dict_Eq_3) {
    return function (xs) {
        return groupBy(Prelude["=="](__dict_Eq_3))(xs);
    };
};
var group$prime = function (__dict_Ord_4) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_4["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_4));
};
var functorArray = new Prelude.Functor(map);
var elemLastIndex = function (__dict_Eq_5) {
    return function (x) {
        return findLastIndex(Prelude["=="](__dict_Eq_5)(x));
    };
};
var elemIndex = function (__dict_Eq_6) {
    return function (x) {
        return findIndex(Prelude["=="](__dict_Eq_6)(x));
    };
};
var deleteBy = function (_67) {
    return function (_68) {
        return function (_69) {
            if (_69.length === 0) {
                return [  ];
            };
            var _309 = findIndex(_67(_68))(_69);
            if (Prelude["<"](Prelude.ordNumber)(_309)(0)) {
                return _69;
            };
            return deleteAt(_309)(1)(_69);
        };
    };
};
var $$delete = function (__dict_Eq_7) {
    return deleteBy(Prelude["=="](__dict_Eq_7));
};
var $bslash$bslash = function (__dict_Eq_8) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy__75) {
                return function (__copy__76) {
                    var _75 = __copy__75;
                    var _76 = __copy__76;
                    tco: while (true) {
                        if (_76.length === 0) {
                            return _75;
                        };
                        if (_75.length === 0) {
                            return [  ];
                        };
                        if (_76.length >= 1) {
                            var _313 = _76.slice(1);
                            var __tco__75 = $$delete(__dict_Eq_8)(_76[0])(_75);
                            _75 = __tco__75;
                            _76 = _313;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return go(xs)(ys);
        };
    };
};
var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
var monadArray = new Prelude.Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
    return applyArray;
});
var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
    return functorArray;
});
var applicativeArray = new Prelude.Applicative(function () {
    return applyArray;
}, singleton);
var altArray = new Control_Alt.Alt(append, function () {
    return functorArray;
});
var plusArray = new Control_Plus.Plus(function () {
    return altArray;
}, [  ]);
var alternativeArray = new Control_Alternative.Alternative(function () {
    return plusArray;
}, function () {
    return applicativeArray;
});
var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
    return alternativeArray;
}, function () {
    return monadArray;
});
module.exports = {
    span: span, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    sortBy: sortBy, 
    sort: sort, 
    nubBy: nubBy, 
    nub: nub, 
    zipWith: zipWith, 
    range: range, 
    filter: filter, 
    concatMap: concatMap, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    "\\\\": $bslash$bslash, 
    "delete": $$delete, 
    deleteBy: deleteBy, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    take: take, 
    drop: drop, 
    reverse: reverse, 
    concat: concat, 
    append: append, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    length: length, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    map: map, 
    "null": $$null, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    singleton: singleton, 
    snoc: snoc, 
    "..": $dot$dot, 
    "!!": $bang$bang, 
    functorArray: functorArray, 
    applyArray: applyArray, 
    applicativeArray: applicativeArray, 
    bindArray: bindArray, 
    monadArray: monadArray, 
    semigroupArray: semigroupArray, 
    altArray: altArray, 
    plusArray: plusArray, 
    alternativeArray: alternativeArray, 
    monadPlusArray: monadPlusArray
};

},{"Control.Alt":2,"Control.Alternative":3,"Control.MonadPlus":8,"Control.Plus":9,"Data.Maybe":12,"Prelude":17,"Prelude.Unsafe":16}],11:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function mkFn0(fn) {  return function() {    return fn({});  };};
function mkFn1(fn) {  return function(a) {    return fn(a);  };};
function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
function runFn0(fn) {  return fn();};
function runFn1(fn) {  return function(a) {    return fn(a);  };};
function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
var on = function (f) {
    return function (g) {
        return function (x) {
            return function (y) {
                return f(g(x))(g(y));
            };
        };
    };
};
module.exports = {
    runFn10: runFn10, 
    runFn9: runFn9, 
    runFn8: runFn8, 
    runFn7: runFn7, 
    runFn6: runFn6, 
    runFn5: runFn5, 
    runFn4: runFn4, 
    runFn3: runFn3, 
    runFn2: runFn2, 
    runFn1: runFn1, 
    runFn0: runFn0, 
    mkFn10: mkFn10, 
    mkFn9: mkFn9, 
    mkFn8: mkFn8, 
    mkFn7: mkFn7, 
    mkFn6: mkFn6, 
    mkFn5: mkFn5, 
    mkFn4: mkFn4, 
    mkFn3: mkFn3, 
    mkFn2: mkFn2, 
    mkFn1: mkFn1, 
    mkFn0: mkFn0, 
    on: on
};

},{"Prelude":17}],12:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function Nothing() {

};
Nothing.value = new Nothing();
function Just(value0) {
    this.value0 = value0;
};
Just.create = function (value0) {
    return new Just(value0);
};
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_57) {
        if (_57 instanceof Just) {
            return Prelude["++"](Prelude.semigroupString)("Just (")(Prelude["++"](Prelude.semigroupString)(Prelude.show(__dict_Show_0)(_57.value0))(")"));
        };
        if (_57 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_55) {
        return function (_56) {
            if (_55 instanceof Nothing) {
                return _56;
            };
            if (_56 instanceof Nothing) {
                return _55;
            };
            if (_55 instanceof Just && _56 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_55.value0)(_56.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (_42) {
    return function (_43) {
        return function (_44) {
            if (_44 instanceof Nothing) {
                return _42;
            };
            if (_44 instanceof Just) {
                return _43(_44.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (_45) {
    return function (_46) {
        if (_46 instanceof Just) {
            return new Just(_45(_46.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (_53) {
    return function (_54) {
        if (_54 instanceof Nothing) {
            return Nothing.value;
        };
        return Just.create(_53(_54));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return Prelude.not(Prelude.boolLikeBoolean)(Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b));
        };
    }, function (_58) {
        return function (_59) {
            if (_58 instanceof Nothing && _59 instanceof Nothing) {
                return true;
            };
            if (_58 instanceof Just && _59 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_58.value0)(_59.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_60) {
        return function (_61) {
            if (_60 instanceof Just && _61 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_60.value0)(_61.value0);
            };
            if (_60 instanceof Nothing && _61 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_60 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_61 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_47) {
    return function (_48) {
        if (_47 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_47.value0)(_48);
        };
        if (_47 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_51) {
    return function (_52) {
        if (_51 instanceof Just) {
            return _52(_51.value0);
        };
        if (_51 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_49) {
    return function (_50) {
        if (_49 instanceof Nothing) {
            return _50;
        };
        return _49;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Nothing: Nothing, 
    Just: Just, 
    isNothing: isNothing, 
    isJust: isJust, 
    fromMaybe: fromMaybe, 
    maybe: maybe, 
    functorMaybe: functorMaybe, 
    applyMaybe: applyMaybe, 
    applicativeMaybe: applicativeMaybe, 
    altMaybe: altMaybe, 
    plusMaybe: plusMaybe, 
    alternativeMaybe: alternativeMaybe, 
    bindMaybe: bindMaybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    extendMaybe: extendMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe, 
    eqMaybe: eqMaybe, 
    ordMaybe: ordMaybe
};

},{"Control.Alt":2,"Control.Alternative":3,"Control.Extend":5,"Control.MonadPlus":8,"Control.Plus":9,"Prelude":17}],13:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_Array = require("Data.Array");
function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidMaybe = function (__dict_Semigroup_0) {
    return new Monoid(function () {
        return Data_Maybe.semigroupMaybe(__dict_Semigroup_0);
    }, Data_Maybe.Nothing.value);
};
var monoidArray = new Monoid(function () {
    return Data_Array.semigroupArray;
}, [  ]);
var mempty = function (dict) {
    return dict.mempty;
};
var monoidArr = function (__dict_Monoid_1) {
    return new Monoid(function () {
        return Prelude.semigroupArr(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(__dict_Monoid_1)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidString: monoidString, 
    monoidArray: monoidArray, 
    monoidUnit: monoidUnit, 
    monoidArr: monoidArr, 
    monoidMaybe: monoidMaybe
};

},{"Data.Array":10,"Data.Maybe":12,"Prelude":17}],14:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Data_Array = require("Data.Array");
var Data_Monoid = require("Data.Monoid");
var Control_Lazy = require("Control.Lazy");
var Control_Extend = require("Control.Extend");
var Control_Comonad = require("Control.Comonad");
function Tuple(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Tuple.create = function (value0) {
    return function (value1) {
        return new Tuple(value0, value1);
    };
};
var zip = Data_Array.zipWith(Tuple.create);
var unzip = function (_139) {
    if (_139.length >= 1) {
        var _378 = _139.slice(1);
        var _372 = unzip(_378);
        return new Tuple(Prelude[":"]((_139[0]).value0)(_372.value0), Prelude[":"]((_139[0]).value1)(_372.value1));
    };
    if (_139.length === 0) {
        return new Tuple([  ], [  ]);
    };
    throw new Error("Failed pattern match");
};
var uncurry = function (_137) {
    return function (_138) {
        return _137(_138.value0)(_138.value1);
    };
};
var swap = function (_140) {
    return new Tuple(_140.value1, _140.value0);
};
var snd = function (_136) {
    return _136.value1;
};
var showTuple = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_141) {
            return Prelude["++"](Prelude.semigroupString)("Tuple (")(Prelude["++"](Prelude.semigroupString)(Prelude.show(__dict_Show_0)(_141.value0))(Prelude["++"](Prelude.semigroupString)(") (")(Prelude["++"](Prelude.semigroupString)(Prelude.show(__dict_Show_1)(_141.value1))(")"))));
        });
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (_146) {
    return function (_147) {
        return new Tuple(_147.value0, _146.value1);
    };
});
var semigroupTuple = function (__dict_Semigroup_2) {
    return function (__dict_Semigroup_3) {
        return new Prelude.Semigroup(function (_148) {
            return function (_149) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_2)(_148.value0)(_149.value0), Prelude["<>"](__dict_Semigroup_3)(_148.value1)(_149.value1));
            };
        });
    };
};
var monoidTuple = function (__dict_Monoid_6) {
    return function (__dict_Monoid_7) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(__dict_Monoid_6["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(__dict_Monoid_6), Data_Monoid.mempty(__dict_Monoid_7)));
    };
};
var functorTuple = new Prelude.Functor(function (_150) {
    return function (_151) {
        return new Tuple(_151.value0, _150(_151.value1));
    };
});
var fst = function (_135) {
    return _135.value0;
};
var lazyLazy1Tuple = function (__dict_Lazy1_9) {
    return function (__dict_Lazy1_10) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer1(__dict_Lazy1_9)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer1(__dict_Lazy1_10)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyLazy2Tuple = function (__dict_Lazy2_11) {
    return function (__dict_Lazy2_12) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer2(__dict_Lazy2_11)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer2(__dict_Lazy2_12)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var lazyTuple = function (__dict_Lazy_13) {
    return function (__dict_Lazy_14) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(__dict_Lazy_13)(function (_) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(__dict_Lazy_14)(function (_) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var extendTuple = new Control_Extend.Extend(function (_156) {
    return function (_157) {
        return new Tuple(_157.value0, _156(_157));
    };
}, function () {
    return functorTuple;
});
var eqTuple = function (__dict_Eq_15) {
    return function (__dict_Eq_16) {
        return new Prelude.Eq(function (t1) {
            return function (t2) {
                return Prelude.not(Prelude.boolLikeBoolean)(Prelude["=="](eqTuple(__dict_Eq_15)(__dict_Eq_16))(t1)(t2));
            };
        }, function (_142) {
            return function (_143) {
                return Prelude["&&"](Prelude.boolLikeBoolean)(Prelude["=="](__dict_Eq_15)(_142.value0)(_143.value0))(Prelude["=="](__dict_Eq_16)(_142.value1)(_143.value1));
            };
        });
    };
};
var ordTuple = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqTuple(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (_144) {
            return function (_145) {
                var _423 = Prelude.compare(__dict_Ord_4)(_144.value0)(_145.value0);
                if (_423 instanceof Prelude.EQ) {
                    return Prelude.compare(__dict_Ord_5)(_144.value1)(_145.value1);
                };
                return _423;
            };
        });
    };
};
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var applyTuple = function (__dict_Semigroup_18) {
    return new Prelude.Apply(function (_152) {
        return function (_153) {
            return new Tuple(Prelude["<>"](__dict_Semigroup_18)(_152.value0)(_153.value0), _152.value1(_153.value1));
        };
    }, function () {
        return functorTuple;
    });
};
var bindTuple = function (__dict_Semigroup_17) {
    return new Prelude.Bind(function (_154) {
        return function (_155) {
            var _436 = _155(_154.value1);
            return new Tuple(Prelude["<>"](__dict_Semigroup_17)(_154.value0)(_436.value0), _436.value1);
        };
    }, function () {
        return applyTuple(__dict_Semigroup_17);
    });
};
var applicativeTuple = function (__dict_Monoid_19) {
    return new Prelude.Applicative(function () {
        return applyTuple(__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_19)));
};
var monadTuple = function (__dict_Monoid_8) {
    return new Prelude.Monad(function () {
        return applicativeTuple(__dict_Monoid_8);
    }, function () {
        return bindTuple(__dict_Monoid_8["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    swap: swap, 
    unzip: unzip, 
    zip: zip, 
    uncurry: uncurry, 
    curry: curry, 
    snd: snd, 
    fst: fst, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    ordTuple: ordTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    functorTuple: functorTuple, 
    applyTuple: applyTuple, 
    applicativeTuple: applicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    lazyLazy1Tuple: lazyLazy1Tuple, 
    lazyLazy2Tuple: lazyLazy2Tuple
};

},{"Control.Comonad":4,"Control.Extend":5,"Control.Lazy":6,"Data.Array":10,"Data.Monoid":13,"Prelude":17}],15:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Sound = require("Sound");
var Signal_Time = require("Signal.Time");
var Signal = require("Signal");
var Data_Tuple = require("Data.Tuple");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Signal_DOM = require("Signal.DOM");

  function renderObject(o) {
    return function() {
      var el = document.getElementById(o.id);
      el.setAttribute('class', o.css);
      el.setAttribute('style', 'left: '
        + (o.baseX + (o.x | 0)) + 'px; top: '
        + (o.baseY + (o.y | 0)) + 'px');
    }
  };
var velocity = function (o) {
    var _16 = {};
    for (var _17 in o) {
        if (o.hasOwnProperty(_17)) {
            _16[_17] = o[_17];
        };
    };
    _16.x = Prelude["+"](Prelude.numNumber)(o.x)(o.vx);
    _16.y = Prelude["+"](Prelude.numNumber)(o.y)(o.vy);
    return _16;
};
var solidGround = function (o) {
    return Prelude[">="](Prelude.ordNumber)(o.y)(0) ? (function () {
    var _18 = {};
    for (var _19 in o) {
        if (o.hasOwnProperty(_19)) {
            _18[_19] = o[_19];
        };
    };
    _18.y = 0;
    _18.vy = 0;
    _18.css = "";
    return _18;
})() : o;
};
var reset = function (_2) {
    return function (_3) {
        if (Prelude["||"](Prelude.boolLikeBoolean)(Prelude["<"](Prelude.ordNumber)(Prelude["+"](Prelude.numNumber)(_3.x)(_3.baseX))(-100))(Prelude["||"](Prelude.boolLikeBoolean)(Prelude["<"](Prelude.ordNumber)(Prelude["+"](Prelude.numNumber)(_3.y)(_3.baseY))(-100))(Prelude[">"](Prelude.ordNumber)(Prelude["+"](Prelude.numNumber)(_3.y)(_3.baseY))(3000)))) {
            return _2;
        };
        return _3;
    };
};
var playSound = function (_4) {
    return Sound.play(_4.sound);
};
var jump = function (_5) {
    return function (_6) {
        if (_5 && _6.y === 0) {
            var _26 = {};
            for (var _27 in _6) {
                if (_6.hasOwnProperty(_27)) {
                    _26[_27] = _6[_27];
                };
            };
            _26.vy = -20;
            _26.css = "jumping";
            _26.sound = new Sound.Sound("sfx/jump.ogg", 1);
            return _26;
        };
        return _6;
    };
};
var initialPinkie = {
    id: "pinkie", 
    css: "", 
    x: 0, 
    y: 0, 
    baseX: 0, 
    baseY: 276, 
    vx: 0, 
    vy: 0, 
    sound: new Sound.RepeatSound("sfx/smile.ogg", 0.3)
};
var initialHater = {
    id: "hater", 
    css: "", 
    x: 1600, 
    y: 300, 
    baseX: 0, 
    baseY: 0, 
    vx: -8, 
    vy: 0, 
    sound: Sound.Quiet.value
};
var initialCoin = {
    id: "coin", 
    css: "", 
    x: 1600, 
    y: 40, 
    baseX: 0, 
    baseY: 0, 
    vx: -6, 
    vy: 0, 
    sound: Sound.Quiet.value
};
var haterLogic = function (_12) {
    return function (_13) {
        return velocity(reset(initialHater)(_13));
    };
};
var gravity = function (o) {
    var _31 = {};
    for (var _32 in o) {
        if (o.hasOwnProperty(_32)) {
            _31[_32] = o[_32];
        };
    };
    _31.vy = Prelude["+"](Prelude.numNumber)(o.vy)(0.9800000000000001);
    return _31;
};
var frameRate = Signal_Time.every(33);
var ground = Signal["~>"](Signal.functorSignal)(frameRate)(function (n) {
    return {
        id: "ground", 
        css: "", 
        x: Prelude["*"](Prelude.numNumber)(Prelude["%"](Prelude.numNumber)(Prelude["/"](Prelude.numNumber)(n)(33))(64))(-8), 
        y: 0, 
        baseX: -128, 
        baseY: 384, 
        vx: 0, 
        vy: 0, 
        sound: Sound.Quiet.value
    };
});
var hater = Signal.foldp(haterLogic)(initialHater)(frameRate);
var clearSound = function (o) {
    var _33 = {};
    for (var _34 in o) {
        if (o.hasOwnProperty(_34)) {
            _33[_34] = o[_34];
        };
    };
    _33.sound = Sound.Quiet.value;
    return _33;
};
var bounds = function (a) {
    return {
        x1: Prelude["+"](Prelude.numNumber)(a.x)(a.baseX), 
        y1: Prelude["+"](Prelude.numNumber)(a.y)(a.baseY), 
        x2: Prelude["+"](Prelude.numNumber)(Prelude["+"](Prelude.numNumber)(a.x)(a.baseX))(64), 
        y2: Prelude["+"](Prelude.numNumber)(Prelude["+"](Prelude.numNumber)(a.y)(a.baseY))(64)
    };
};
var intersects = function (a) {
    return function (b) {
        var b$prime = bounds(b);
        var a$prime = bounds(a);
        return Prelude.not(Prelude.boolLikeBoolean)(Prelude["||"](Prelude.boolLikeBoolean)(Prelude[">"](Prelude.ordNumber)(b$prime.x1)(a$prime.x2))(Prelude["||"](Prelude.boolLikeBoolean)(Prelude["<"](Prelude.ordNumber)(b$prime.x2)(a$prime.x1))(Prelude["||"](Prelude.boolLikeBoolean)(Prelude[">"](Prelude.ordNumber)(b$prime.y1)(a$prime.y2))(Prelude["<"](Prelude.ordNumber)(b$prime.y2)(a$prime.y1)))));
    };
};
var hated = function (_7) {
    return function (_8) {
        return function (_9) {
            if (_8.css === "gameover") {
                return reset(initialPinkie)(clearSound(velocity((function () {
                    var _38 = {};
                    for (var _39 in _8) {
                        if (_8.hasOwnProperty(_39)) {
                            _38[_39] = _8[_39];
                        };
                    };
                    _38.vy = Prelude["+"](Prelude.numNumber)(_8.vy)(0.5);
                    return _38;
                })())));
            };
            if (intersects(_7)(_8)) {
                return velocity((function () {
                    var _41 = {};
                    for (var _42 in _8) {
                        if (_8.hasOwnProperty(_42)) {
                            _41[_42] = _8[_42];
                        };
                    };
                    _41.css = "gameover";
                    _41.vy = -15;
                    _41.sound = new Sound.ExclusiveSound("sfx/gameover.ogg", 1);
                    return _41;
                })());
            };
            return _9(_8);
        };
    };
};
var pinkieLogic = function (_10) {
    return function (_11) {
        return hated(_10.value1)(_11)(Prelude["<<<"](Prelude.semigroupoidArr)(solidGround)(Prelude["<<<"](Prelude.semigroupoidArr)(gravity)(Prelude["<<<"](Prelude.semigroupoidArr)(velocity)(Prelude["<<<"](Prelude.semigroupoidArr)(jump(_10.value0))(clearSound)))));
    };
};
var pinkie = function (input) {
    return Signal.foldp(pinkieLogic)(initialPinkie)(Signal.sampleOn(frameRate)(input));
};
var coinLogic = function (_14) {
    return function (_15) {
        if (Prelude["<"](Prelude.ordNumber)(_15.vy)(0)) {
            return clearSound(velocity(reset(initialCoin)((function () {
                var _49 = {};
                for (var _50 in _15) {
                    if (_15.hasOwnProperty(_50)) {
                        _49[_50] = _15[_50];
                    };
                };
                _49.vy = Prelude["*"](Prelude.numNumber)(_15.vy)(2);
                return _49;
            })())));
        };
        if (intersects(_14)(_15)) {
            var _51 = {};
            for (var _52 in _15) {
                if (_15.hasOwnProperty(_52)) {
                    _51[_52] = _15[_52];
                };
            };
            _51.vx = 0;
            _51.vy = -1;
            _51.sound = new Sound.Sound("sfx/coin.ogg", 1);
            return _51;
        };
        return clearSound(velocity(reset(initialCoin)(_15)));
    };
};
var coin = Signal.foldp(coinLogic)(initialCoin);
var main = function __do() {
    Sound.play(new Sound.RepeatSound("sfx/smile.ogg", 0.3))();
    var _1 = Signal_DOM.keyPressed(32)();
    var _0 = Signal_DOM.tap();
    return (function () {
        var pinkie$prime = pinkie(Signal.zip(Prelude["<>"](Signal.semigroupSignal)(_1)(_0))(hater));
        var scene = Prelude["<>"](Signal.semigroupSignal)(ground)(Prelude["<>"](Signal.semigroupSignal)(hater)(Prelude["<>"](Signal.semigroupSignal)(pinkie$prime)(coin(pinkie$prime))));
        return function __do() {
            Signal.runSignal(Signal["~>"](Signal.functorSignal)(scene)(renderObject))();
            return Signal.runSignal(Signal["~>"](Signal.functorSignal)(scene)(playSound))();
        };
    })()();
};
module.exports = {
    main: main, 
    coin: coin, 
    coinLogic: coinLogic, 
    hater: hater, 
    haterLogic: haterLogic, 
    pinkie: pinkie, 
    pinkieLogic: pinkieLogic, 
    hated: hated, 
    jump: jump, 
    solidGround: solidGround, 
    velocity: velocity, 
    gravity: gravity, 
    clearSound: clearSound, 
    playSound: playSound, 
    reset: reset, 
    ground: ground, 
    frameRate: frameRate, 
    initialHater: initialHater, 
    initialCoin: initialCoin, 
    initialPinkie: initialPinkie, 
    renderObject: renderObject, 
    intersects: intersects, 
    bounds: bounds
};

},{"Control.Monad.Eff":7,"Data.Tuple":14,"Prelude":17,"Signal":20,"Signal.DOM":18,"Signal.Time":19,"Sound":21}],16:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
module.exports = {
    unsafeIndex: unsafeIndex
};

},{"Prelude":17}],17:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Unit = {
    create: function (value) {
        return value;
    }
};
function LT() {

};
LT.value = new LT();
function GT() {

};
GT.value = new GT();
function EQ() {

};
EQ.value = new EQ();
function Semigroupoid($less$less$less) {
    this["<<<"] = $less$less$less;
};
function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
    this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
    this.id = id;
};
function Show(show) {
    this.show = show;
};
function Functor($less$dollar$greater) {
    this["<$>"] = $less$dollar$greater;
};
function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
    this["<*>"] = $less$times$greater;
    this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
};
function Applicative(__superclass_Prelude$dotApply_0, pure) {
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    this.pure = pure;
};
function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
    this[">>="] = $greater$greater$eq;
    this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
};
function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
    this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
};
function Num($percent, $times, $plus, $minus, $div, negate) {
    this["%"] = $percent;
    this["*"] = $times;
    this["+"] = $plus;
    this["-"] = $minus;
    this["/"] = $div;
    this.negate = negate;
};
function Eq($div$eq, $eq$eq) {
    this["/="] = $div$eq;
    this["=="] = $eq$eq;
};
function Ord(__superclass_Prelude$dotEq_0, compare) {
    this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
    this.compare = compare;
};
function Bits($amp, $up, complement, shl, shr, zshr, $bar) {
    this["&"] = $amp;
    this["^"] = $up;
    this.complement = complement;
    this.shl = shl;
    this.shr = shr;
    this.zshr = zshr;
    this["|"] = $bar;
};
function BoolLike($amp$amp, not, $bar$bar) {
    this["&&"] = $amp$amp;
    this.not = not;
    this["||"] = $bar$bar;
};
function Semigroup($less$greater) {
    this["<>"] = $less$greater;
};
function cons(e) {  return function(l) {    return [e].concat(l);  };};
function showStringImpl(s) {  return JSON.stringify(s);};
function showNumberImpl(n) {  return n.toString();};
function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
function numNegate(n) {  return -n;};
function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
function numComplement(n) {  return ~n;};
function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
function boolNot(b) {  return !b;};
function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
var $bar$bar = function (dict) {
    return dict["||"];
};
var $bar = function (dict) {
    return dict["|"];
};
var $up = function (dict) {
    return dict["^"];
};
var $greater$greater$eq = function (dict) {
    return dict[">>="];
};
var $eq$eq = function (dict) {
    return dict["=="];
};
var $less$greater = function (dict) {
    return dict["<>"];
};
var $less$less$less = function (dict) {
    return dict["<<<"];
};
var $greater$greater$greater = function (__dict_Semigroupoid_0) {
    return function (f) {
        return function (g) {
            return $less$less$less(__dict_Semigroupoid_0)(g)(f);
        };
    };
};
var $less$times$greater = function (dict) {
    return dict["<*>"];
};
var $less$dollar$greater = function (dict) {
    return dict["<$>"];
};
var $colon = cons;
var $div$eq = function (dict) {
    return dict["/="];
};
var $div = function (dict) {
    return dict["/"];
};
var $minus = function (dict) {
    return dict["-"];
};
var $plus$plus = function (__dict_Semigroup_1) {
    return $less$greater(__dict_Semigroup_1);
};
var $plus = function (dict) {
    return dict["+"];
};
var $times = function (dict) {
    return dict["*"];
};
var $amp$amp = function (dict) {
    return dict["&&"];
};
var $amp = function (dict) {
    return dict["&"];
};
var $percent = function (dict) {
    return dict["%"];
};
var $dollar = function (f) {
    return function (x) {
        return f(x);
    };
};
var $hash = function (x) {
    return function (f) {
        return f(x);
    };
};
var zshr = function (dict) {
    return dict.zshr;
};
var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
var unit = {};
var shr = function (dict) {
    return dict.shr;
};
var showUnit = new Show(function (_10) {
    return "Unit {}";
});
var showString = new Show(showStringImpl);
var showOrdering = new Show(function (_18) {
    if (_18 instanceof LT) {
        return "LT";
    };
    if (_18 instanceof GT) {
        return "GT";
    };
    if (_18 instanceof EQ) {
        return "EQ";
    };
    throw new Error("Failed pattern match");
});
var showNumber = new Show(showNumberImpl);
var showBoolean = new Show(function (_11) {
    if (_11) {
        return "true";
    };
    if (!_11) {
        return "false";
    };
    throw new Error("Failed pattern match");
});
var show = function (dict) {
    return dict.show;
};
var showArray = function (__dict_Show_2) {
    return new Show(showArrayImpl(show(__dict_Show_2)));
};
var shl = function (dict) {
    return dict.shl;
};
var semigroupoidArr = new Semigroupoid(function (f) {
    return function (g) {
        return function (x) {
            return f(g(x));
        };
    };
});
var semigroupUnit = new Semigroup(function (_25) {
    return function (_26) {
        return {};
    };
});
var semigroupString = new Semigroup(concatString);
var semigroupArr = function (__dict_Semigroup_3) {
    return new Semigroup(function (f) {
        return function (g) {
            return function (x) {
                return $less$greater(__dict_Semigroup_3)(f(x))(g(x));
            };
        };
    });
};
var pure = function (dict) {
    return dict.pure;
};
var $$return = function (__dict_Monad_4) {
    return pure(__dict_Monad_4["__superclass_Prelude.Applicative_0"]());
};
var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
var not = function (dict) {
    return dict.not;
};
var negate = function (dict) {
    return dict.negate;
};
var liftM1 = function (__dict_Monad_5) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_5["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                return $$return(__dict_Monad_5)(f(_0));
            });
        };
    };
};
var liftA1 = function (__dict_Applicative_6) {
    return function (f) {
        return function (a) {
            return $less$times$greater(__dict_Applicative_6["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_6)(f))(a);
        };
    };
};
var id = function (dict) {
    return dict.id;
};
var functorArr = new Functor($less$less$less(semigroupoidArr));
var flip = function (f) {
    return function (b) {
        return function (a) {
            return f(a)(b);
        };
    };
};
var eqUnit = new Eq(function (_14) {
    return function (_15) {
        return false;
    };
}, function (_12) {
    return function (_13) {
        return true;
    };
});
var ordUnit = new Ord(function () {
    return eqUnit;
}, function (_19) {
    return function (_20) {
        return EQ.value;
    };
});
var eqString = new Eq(refIneq, refEq);
var ordString = new Ord(function () {
    return eqString;
}, unsafeCompare);
var eqNumber = new Eq(refIneq, refEq);
var ordNumber = new Ord(function () {
    return eqNumber;
}, unsafeCompare);
var eqBoolean = new Eq(refIneq, refEq);
var ordBoolean = new Ord(function () {
    return eqBoolean;
}, function (_21) {
    return function (_22) {
        if (!_21 && !_22) {
            return EQ.value;
        };
        if (!_21 && _22) {
            return LT.value;
        };
        if (_21 && _22) {
            return EQ.value;
        };
        if (_21 && !_22) {
            return GT.value;
        };
        throw new Error("Failed pattern match");
    };
});
var $$const = function (_6) {
    return function (_7) {
        return _6;
    };
};
var $$void = function (__dict_Functor_8) {
    return function (fa) {
        return $less$dollar$greater(__dict_Functor_8)($$const(unit))(fa);
    };
};
var complement = function (dict) {
    return dict.complement;
};
var compare = function (dict) {
    return dict.compare;
};
var $less = function (__dict_Ord_10) {
    return function (a1) {
        return function (a2) {
            var _208 = compare(__dict_Ord_10)(a1)(a2);
            if (_208 instanceof LT) {
                return true;
            };
            return false;
        };
    };
};
var $less$eq = function (__dict_Ord_11) {
    return function (a1) {
        return function (a2) {
            var _209 = compare(__dict_Ord_11)(a1)(a2);
            if (_209 instanceof GT) {
                return false;
            };
            return true;
        };
    };
};
var $greater = function (__dict_Ord_12) {
    return function (a1) {
        return function (a2) {
            var _210 = compare(__dict_Ord_12)(a1)(a2);
            if (_210 instanceof GT) {
                return true;
            };
            return false;
        };
    };
};
var $greater$eq = function (__dict_Ord_13) {
    return function (a1) {
        return function (a2) {
            var _211 = compare(__dict_Ord_13)(a1)(a2);
            if (_211 instanceof LT) {
                return false;
            };
            return true;
        };
    };
};
var categoryArr = new Category(function () {
    return semigroupoidArr;
}, function (x) {
    return x;
});
var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
var eqArray = function (__dict_Eq_7) {
    return new Eq(function (xs) {
        return function (ys) {
            return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_7))(xs)(ys));
        };
    }, function (xs) {
        return function (ys) {
            return eqArrayImpl($eq$eq(__dict_Eq_7))(xs)(ys);
        };
    });
};
var ordArray = function (__dict_Ord_9) {
    return new Ord(function () {
        return eqArray(__dict_Ord_9["__superclass_Prelude.Eq_0"]());
    }, function (_23) {
        return function (_24) {
            if (_23.length === 0 && _24.length === 0) {
                return EQ.value;
            };
            if (_23.length === 0) {
                return LT.value;
            };
            if (_24.length === 0) {
                return GT.value;
            };
            if (_23.length >= 1) {
                var _218 = _23.slice(1);
                if (_24.length >= 1) {
                    var _216 = _24.slice(1);
                    var _214 = compare(__dict_Ord_9)(_23[0])(_24[0]);
                    if (_214 instanceof EQ) {
                        return compare(ordArray(__dict_Ord_9))(_218)(_216);
                    };
                    return _214;
                };
            };
            throw new Error("Failed pattern match");
        };
    });
};
var eqOrdering = new Eq(function (x) {
    return function (y) {
        return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
    };
}, function (_16) {
    return function (_17) {
        if (_16 instanceof LT && _17 instanceof LT) {
            return true;
        };
        if (_16 instanceof GT && _17 instanceof GT) {
            return true;
        };
        if (_16 instanceof EQ && _17 instanceof EQ) {
            return true;
        };
        return false;
    };
});
var bitsNumber = new Bits(numAnd, numXor, numComplement, numShl, numShr, numZshr, numOr);
var asTypeOf = function (_8) {
    return function (_9) {
        return _8;
    };
};
var applyArr = new Apply(function (f) {
    return function (g) {
        return function (x) {
            return f(x)(g(x));
        };
    };
}, function () {
    return functorArr;
});
var bindArr = new Bind(function (m) {
    return function (f) {
        return function (x) {
            return f(m(x))(x);
        };
    };
}, function () {
    return applyArr;
});
var applicativeArr = new Applicative(function () {
    return applyArr;
}, $$const);
var monadArr = new Monad(function () {
    return applicativeArr;
}, function () {
    return bindArr;
});
var ap = function (__dict_Monad_14) {
    return function (f) {
        return function (a) {
            return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                return $greater$greater$eq(__dict_Monad_14["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                    return $$return(__dict_Monad_14)(_2(_1));
                });
            });
        };
    };
};
module.exports = {
    Unit: Unit, 
    LT: LT, 
    GT: GT, 
    EQ: EQ, 
    Semigroup: Semigroup, 
    BoolLike: BoolLike, 
    Bits: Bits, 
    Ord: Ord, 
    Eq: Eq, 
    Num: Num, 
    Monad: Monad, 
    Bind: Bind, 
    Applicative: Applicative, 
    Apply: Apply, 
    Functor: Functor, 
    Show: Show, 
    Category: Category, 
    Semigroupoid: Semigroupoid, 
    unit: unit, 
    "++": $plus$plus, 
    "<>": $less$greater, 
    not: not, 
    "||": $bar$bar, 
    "&&": $amp$amp, 
    complement: complement, 
    zshr: zshr, 
    shr: shr, 
    shl: shl, 
    "^": $up, 
    "|": $bar, 
    "&": $amp, 
    ">=": $greater$eq, 
    "<=": $less$eq, 
    ">": $greater, 
    "<": $less, 
    compare: compare, 
    refIneq: refIneq, 
    refEq: refEq, 
    "/=": $div$eq, 
    "==": $eq$eq, 
    negate: negate, 
    "%": $percent, 
    "/": $div, 
    "*": $times, 
    "-": $minus, 
    "+": $plus, 
    ap: ap, 
    liftM1: liftM1, 
    "return": $$return, 
    ">>=": $greater$greater$eq, 
    liftA1: liftA1, 
    pure: pure, 
    "<*>": $less$times$greater, 
    "void": $$void, 
    "<$>": $less$dollar$greater, 
    show: show, 
    cons: cons, 
    ":": $colon, 
    "#": $hash, 
    "$": $dollar, 
    id: id, 
    ">>>": $greater$greater$greater, 
    "<<<": $less$less$less, 
    asTypeOf: asTypeOf, 
    "const": $$const, 
    flip: flip, 
    semigroupoidArr: semigroupoidArr, 
    categoryArr: categoryArr, 
    showUnit: showUnit, 
    showString: showString, 
    showBoolean: showBoolean, 
    showNumber: showNumber, 
    showArray: showArray, 
    functorArr: functorArr, 
    applyArr: applyArr, 
    applicativeArr: applicativeArr, 
    bindArr: bindArr, 
    monadArr: monadArr, 
    numNumber: numNumber, 
    eqUnit: eqUnit, 
    eqString: eqString, 
    eqNumber: eqNumber, 
    eqBoolean: eqBoolean, 
    eqArray: eqArray, 
    eqOrdering: eqOrdering, 
    showOrdering: showOrdering, 
    ordUnit: ordUnit, 
    ordBoolean: ordBoolean, 
    ordNumber: ordNumber, 
    ordString: ordString, 
    ordArray: ordArray, 
    bitsNumber: bitsNumber, 
    boolLikeBoolean: boolLikeBoolean, 
    semigroupUnit: semigroupUnit, 
    semigroupString: semigroupString, 
    semigroupArr: semigroupArr
};

},{}],18:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Signal = require("Signal");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Signal_Time = require("Signal.Time");

  function keyPressedP(constant, keyCode) {
    return function() {
      var out = constant(false);
      window.addEventListener("keydown", function(e) {
        if (e.keyCode === keyCode) out.set(true);
      });
      window.addEventListener("keyup", function(e) {
        if (e.keyCode === keyCode) out.set(false);
      });
      return out;
    };
  };

  function mouseButtonP(constant, button) {
    return function() {
      var out = constant(false);
      window.addEventListener("mousedown", function(e) {
        if (e.button === button) out.set(true);
      });
      window.addEventListener("mouseup", function(e) {
        if (e.button === button) out.set(false);
      });
    };
  };

  function touchP(constant) {
    var out = constant(false);
    function report(e) {
      var touches = [], i, l = e.touches.length;
      for (i = 0; i < l; i++) touches.push(e.touches.item(i));
      out.set(touches);
    }
    window.addEventListener("touchstart", report);
    window.addEventListener("touchend", report);
    window.addEventListener("touchmove", report);
    window.addEventListener("touchcancel", report);
    return function() {
      return out;
    };
  };

  function mousePosP(constant) {
    var out = constant({x:0,y:0});
    window.addEventListener('mousemove', function(e) {
      if (e.pageX !== undefined && e.pageY !== undefined) {
        out.set({x:e.pageX, y: e.pageY});
      } else if (e.clientX !== undefined && e.clientY !== undefined) {
        out.set({
          x: e.clientX + document.body.scrollLeft +
             document.documentElement.scrollLeft,
          y: e.clientY + document.body.scrollTop +
             document.documentElement.scrollTop
        });
      } else {
        throw new Error('Mouse event has no coordinates I recognise!');
      }
    });
    return function() {
      return out;
    };
  };

  function animationFrameP(constant, now) {
    return function() {
      var requestAnimFrame, cancelAnimFrame;
      if (window.requestAnimationFrame) {
        requestAnimFrame = window.requestAnimationFrame;
        cancelAnimFrame = window.cancelAnimationFrame;
      } else if (window.mozRequestAnimationFrame) {
        requestAnimFrame = window.mozRequestAnimationFrame;
        cancelAnimFrame = window.mozCancelAnimationFrame;
      } else if (window.webkitRequestAnimationFrame) {
        requestAnimFrame = window.webkitRequestAnimationFrame;
        cancelAnimFrame = window.webkitCancelAnimationFrame;
      } else if (window.msRequestAnimationFrame) {
        requestAnimFrame = window.msRequestAnimationFrame;
        cancelAnimFrame = window.msCancelAnimationFrame;
      } else if (window.oRequestAnimationFrame) {
        requestAnimFrame = window.oRequestAnimationFrame;
        cancelAnimFrame = window.oCancelAnimationFrame;
      } else {
        requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
        cancelAnimFrame = window.clearTimeout;
      }
      var out = constant(now());
      requestAnimFrame(function tick(t) {
        out.set(t); requestAnimFrame(tick);
      });
      return out;
    };
  };
var touch = touchP(Signal.constant);
var tap = function __do() {
    var _0 = touch();
    return Signal["~>"](Signal.functorSignal)(_0)(function (t) {
        if (t.length === 0) {
            return false;
        };
        return true;
    });
};
var mousePos = mousePosP(Signal.constant);
var mouseButton = Data_Function.runFn2(mouseButtonP)(Signal.constant);
var keyPressed = Data_Function.runFn2(keyPressedP)(Signal.constant);
var animationFrame = animationFrameP(Signal.constant, Signal_Time.now);
module.exports = {
    mousePos: mousePos, 
    tap: tap, 
    touch: touch, 
    mouseButton: mouseButton, 
    keyPressed: keyPressed, 
    animationFrame: animationFrame
};

},{"Control.Monad.Eff":7,"Data.Function":11,"Prelude":17,"Signal":20,"Signal.Time":19}],19:[function(require,module,exports){
(function (process){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Signal = require("Signal");

  function everyP(constant) {
  return function(now) {
  return function(t) {
    var out = constant(now());
    setInterval(function() {
      out.set(now());
    }, t);
    return out;
  };};};

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (process && process.hrtime && function() {
        var t = process.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };
var second = 1000;
var millisecond = 1;
var every = everyP(Signal.constant)(now);
module.exports = {
    second: second, 
    now: now, 
    millisecond: millisecond, 
    every: every
};

}).call(this,require('_process'))
},{"Prelude":17,"Signal":20,"_process":1}],20:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Tuple = require("Data.Tuple");

  function constant(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  function liftP(constant, fun, sig) {
    var out = constant(fun(sig.get()));
    sig.subscribe(function(val) { out.set(fun(val)); });
    return out;
  };

  function applySigP(constant, fun, sig) {
    var out = constant(fun.get()(sig.get()));
    var produce = function() { out.set(fun.get()(sig.get())); };
    fun.subscribe(produce);
    sig.subscribe(produce);
    return out;
  };

  function mergeP(constant, sig1, sig2) {
    var out = constant(sig1.get());
    sig1.subscribe(out.set);
    sig2.subscribe(out.set);
    return out;
  };

  function foldpP(constant, fun, seed, sig) {
    var acc = fun(sig.get())(seed);
    var out = constant(acc);
    sig.subscribe(function(val) {
      acc = fun(val)(acc);
      out.set(acc);
    });
    return out;
  };

  function sampleOnP(constant, sig1, sig2) {
    var out = constant(sig2.get());
    sig1.subscribe(function() {
      out.set(sig2.get());
    });
    return out;
  };

  function distinctP(constant) {
  return function(eq) {
  return function(sig) {
    var val = sig.get();
    var out = constant(val);
    sig.subscribe(function(newval) {
      if (eq['/='](val, newval)) {
        val = newval;
        out.set(val);
      }
    });
    return out;
  };};};

  function zipP(Tuple, constant, sig1, sig2) {
    var val1 = sig1.get(), val2 = sig2.get();
    var out = constant(Tuple(val1)(val2));
    sig1.subscribe(function(v) {
      val1 = v;
      out.set(Tuple(val1)(val2));
    });
    sig2.subscribe(function(v) {
      val2 = v;
      out.set(Tuple(val1)(val2));
    });
    return out;
  };

  function runSignal(sig) {
    return function() {
      sig.subscribe(function(val) {
        val();
      });
      return {};
    };
  };

  function unwrapP(constant, sig) {
    return function() {
      var out = constant(sig.get()());
      sig.subscribe(function(val) { out.set(val()); });
      return out;
    };
  };
var $tilde$greater = function (__dict_Functor_0) {
    return Prelude.flip(Prelude["<$>"](__dict_Functor_0));
};
var $tilde = function (__dict_Apply_1) {
    return Prelude["<*>"](__dict_Apply_1);
};
var $less$tilde = function (__dict_Functor_2) {
    return Prelude["<$>"](__dict_Functor_2);
};
var zip = function (a) {
    return function (b) {
        return zipP(Data_Tuple.Tuple.create, constant, a, b);
    };
};
var unwrap = Data_Function.runFn2(unwrapP)(constant);
var sampleOn = Data_Function.runFn3(sampleOnP)(constant);
var merge = Data_Function.runFn3(mergeP)(constant);
var semigroupSignal = new Prelude.Semigroup(merge);
var lift = Data_Function.runFn3(liftP)(constant);
var functorSignal = new Prelude.Functor(lift);
var foldp = Data_Function.runFn4(foldpP)(constant);
var distinct = function (__dict_Eq_3) {
    return distinctP(__dict_Eq_3)(constant);
};
var applySig = Data_Function.runFn3(applySigP)(constant);
var applySignal = new Prelude.Apply(applySig, function () {
    return functorSignal;
});
var applicativeSignal = new Prelude.Applicative(function () {
    return applySignal;
}, constant);
module.exports = {
    "~": $tilde, 
    "~>": $tilde$greater, 
    "<~": $less$tilde, 
    unwrap: unwrap, 
    runSignal: runSignal, 
    zip: zip, 
    distinct: distinct, 
    sampleOn: sampleOn, 
    foldp: foldp, 
    merge: merge, 
    applySig: applySig, 
    lift: lift, 
    constant: constant, 
    functorSignal: functorSignal, 
    applySignal: applySignal, 
    applicativeSignal: applicativeSignal, 
    semigroupSignal: semigroupSignal
};

},{"Data.Function":11,"Data.Tuple":14,"Prelude":17}],21:[function(require,module,exports){
// Generated by psc-make version 0.5.7
"use strict";
var Prelude = require("Prelude");
function Quiet() {

};
Quiet.value = new Quiet();
function Sound(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Sound.create = function (value0) {
    return function (value1) {
        return new Sound(value0, value1);
    };
};
function ExclusiveSound(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
ExclusiveSound.create = function (value0) {
    return function (value1) {
        return new ExclusiveSound(value0, value1);
    };
};
function RepeatSound(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
RepeatSound.create = function (value0) {
    return function (value1) {
        return new RepeatSound(value0, value1);
    };
};

  var play = (function() {
    var active = [];
    function play(o) {
      return function() {
        if (!(o instanceof Quiet)) {
          if (o instanceof ExclusiveSound) {
            active.forEach(function(i) { i.pause(); });
            active = [];
          }
          var el = new Audio(o.value0);
          el.volume = o.value1;
          el.autoplay = true;
          el.addEventListener("ended", function(e) {
            active = active.filter(function(i) { return i !== e.target });
          });
          if (o instanceof RepeatSound) el.loop = true;
          active.push(el);
        }
      };
    }
    return play;
  })();;
module.exports = {
    Quiet: Quiet, 
    Sound: Sound, 
    ExclusiveSound: ExclusiveSound, 
    RepeatSound: RepeatSound, 
    play: play
};

},{"Prelude":17}],22:[function(require,module,exports){
require('Main').main();

},{"Main":15}]},{},[22]);
